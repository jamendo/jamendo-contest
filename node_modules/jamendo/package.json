{
  "name": "jamendo",
  "version": "0.3.0",
  "description": "A simple wrapper to Jamendo API v3",
  "main": "index.js",
  "scripts": {
    "test": "node tests.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/vincent/node-jamendo.git"
  },
  "keywords": [
    "jamendo"
  ],
  "author": {
    "name": "Vincent Lark vincent.lark@gmail.com"
  },
  "license": "BSD",
  "dependencies": {
    "request": "~2.20.0"
  },
  "devDependencies": {
    "coffee-script": "*",
    "grunt": ">= 0.4.0",
    "grunt-contrib-jshint": "~0.4.3",
    "grunt-shell": "~0.2.2"
  },
  "readmeFilename": "Readme.md",
  "gitHead": "abe2a2e6a09763bd95d627bd2ade8a50a3ecb7df",
  "readme": "# Jamendo API client\n```jamendo``` is a simple Jamendo API javascript wrapper.\n\nIt only makes HTTP requests with the well known [request](https://github.com/mikeal/request) module.\n\nAll methods described at http://developer.jamendo.com/v3.0 are supported.\n\n# Install\n```bash\n$ npm install jamendo\n```\n\n# Use\n```javascript\nvar Jamendo = require('jamendo');\n\nvar jamendo = new Jamendo({ ... });\n\njamendo.albums({ id: 33 }, function(error, data){\n    console.log(data.results[0]);\n});\n```\n```\n{ id: '33',\n  name: 'Simple Exercice',\n  releasedate: '2004-12-28',\n  artist_id: '5',\n  artist_name: 'Both',\n  image: 'http://imgjam.com/albums/s0/33/covers/1.200.jpg',\n  zip: 'http://storage-new.newjamendo.com/download/a33/mp32/'\n}\n```\n\nAs methods return a ```request``` object, they are streamable.\n```javascript\n// write the track #245 in mp3 on disk\njamendo.tracks_file({ id: 245 }).pipe(fs.createWriteStream('Both - J.E.T. Apostrophe A.I.M.E.mp3'));\n```\n\n# Supported methods and workflows\nAll read methods are supported, see http://developer.jamendo.com/v3.0#readmethods-list\n\nWrite methods are supported, but this library WILL NOT HANDLE OAUTH2 for you.\n\nYou have to handle oAuth2 workflows by yourself.\n\nThat said, some methods can help:\n```javascript\njamendo.authorize({}, function(error, login_url){\n  // redirect yourself the user to login_url ...\n  // once your application is accepted, he will be redirected \n  // with an authorization_code, valid for 30 seconds\n});\n\njamendo.grant({ code: 'mysupergreatauthcode' }, function(error, oauth_data){\n  /* oauth_data == {\n    access_token: 'c2839ba71a1e457e51e9c0d0f12345723e92b1865',\n    refresh_token: '46f3fbc0e3fe7627503e3b12345c1e36ca92388b',\n    expires_in: 7200,\n    token_type: 'bearer',\n    scope: 'music'\n  }\n  */\n});\n```\n\nOnce you have these oauth details, you can use write methods.\n```javascript\njamendo.setuser_fan({\n  access_token: 'c2839ba71a1e457e51e9c0d0f12345723e92b1865',\n  artist_id: 5\n}, function(error, error_message, warnings){\n  // you are now a fan of the artist Both\n});\n```\n\n# Syntax sugar\nJamendo API uses specific formats for some parameters. This wrapper library will take care of formatting for you.\n\nLists can be specified as arrays, so\n```javascript\njamendo.albums({ id: [ 33, 888 ] }, ... \n// is the same as\njamendo.albums({ id: '33,888' }, ... // api required syntax\n```\n\n```datebetween``` parameter can be specified as arrays containing two bounds (as timestamps or Date objects), so\n```javascript\njamendo.tracks({ datebetween: [ 449921044 * 1000, '2011-10-10' ] }, ... \n// is the same as\njamendo.tracks({ datebetween: [ new Date('1984-04-04'), '2011-10-10' ] }, ... \n// is the same as\njamendo.tracks({ datebetween: '1984-04-04_2011-10-10' ] }, ... // api required syntax\n```\n\nDefault values will be explicited, according to current API defaults, so\n```javascript\njamendo.artists({ }, ... \n// is the same as\njamendo.artists({ offset: 0, limit: 10, format: 'json' }, ... \n```\n\n# Run tests\n```bash\n$ npm test\n```\n\nWrite methods will be tested if you set a valid authorization code in the ```AUTHORIZATION_CODE``` environement variable.\n```bash\n$ AUTHORIZATION_CODE=1234567890987654321 npm test\n```\n\n# Run Grunt (jslint, docs)\n```bash\n$ grunt\n```\n\n# Constructor settings\nYou can set following options in the ```settings``` parameter\n```javascript\nvar jamendo = new Jamendo({\n  client_id : 'no default',     // Specify your client_id\n                                // see http://developer.jamendo.com/v3.0#obtain_client_id\n  protocol  : 'http',           // HTTP protocol to use, http or https\n  version   : 'v3.0',           // Use the specified API version\n\n  debug     : false             // Print the whole response object and body in the console\n\n  rejectUnauthorized: false     // Ignore SSL certificates issues\n                                // see TLS options http://nodejs.org/docs/v0.7.8/api/https.html\n});\n```\n\n# Documentation\nAPI documentation is built by ```grunt``` and stored in the ```public/docs``` directory\n\n# License\nBSD\n\n# Contribute\nAll comments, patchs and pull requests are welcome, but please ensure you ran ```grunt``` without warnings before creating a pull request.\n\n# Background\nMaintainer @vincent (me duh!) was a Jamendo developper for about 4 years and still have relationships with Jamendo staff.\n\n",
  "bugs": {
    "url": "https://github.com/vincent/node-jamendo/issues"
  },
  "_id": "jamendo@0.3.0",
  "dist": {
    "shasum": "da99c08539ca1fb14c91bf3eafd62856d4700173"
  },
  "_from": "jamendo@0.3.0",
  "_resolved": "https://registry.npmjs.org/jamendo/-/jamendo-0.3.0.tgz"
}
